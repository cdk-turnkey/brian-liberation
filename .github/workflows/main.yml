# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.GH_REPO_PAT }}
          persist-credentials: false

      - name: Install
        run: |
          npm install

      - name: Install frontend
        working-directory: frontend
        run: |
          npm install

      - name: Install backend
        working-directory: backend
        run: |
          npm install

      - name: Test backend
        working-directory: backend
        run: |
          npm test

      - name: Build
        run: |
          npm run build

      - name: Build frontend
        working-directory: frontend
        run: |
          npm run build

      - name: Test frontend
        working-directory: frontend
        run: |
          npm test

      - name: Install content
        working-directory: content
        run: |
          npm install

      - name: Test content
        working-directory: content
        run: |
          npm test

      - name: Test
        run: |
          npm test

      - name: Identity provider app secret roll call
        env:
          FACEBOOK_APP_SECRET: ${{ secrets.FACEBOOK_APP_SECRET }}
          GOOGLE_APP_SECRET: ${{ secrets.GOOGLE_APP_SECRET }}
          AMAZON_APP_SECRET: ${{ secrets.AMAZON_APP_SECRET }}
          APPLE_APP_SECRET: ${{ secrets.APPLE_APP_SECRET }}
        run: |
          node scripts/idp-app-secret-roll-call.js

      - name: Identify test account and region
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          aws sts get-caller-identity
          echo ${AWS_DEFAULT_REGION} | sed 's/-/+/g'

      - name: Deploy the webapp stack to the test account
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          npx cdk bootstrap
          STACKNAME=$(npx @cdk-turnkey/stackname@1.2.0 --suffix webapp)
          npx cdk deploy --require-approval never ${STACKNAME}

      - name: Deploy to the frontend bucket (test account)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          bash scripts/deploy-frontend.sh

      - name: Deploy content (test account)
        working-directory: content
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          bash deploy-content.sh

      - name: Install itest
        working-directory: itest
        run: |
          npm install

      - name: Run integration tests, test account
        working-directory: scripts
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_REGION: "us-east-1"
        run: |
          bash itest.sh

      - name: Identify prod account and region
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          aws sts get-caller-identity
          echo ${AWS_DEFAULT_REGION} | sed 's/-/+/g'

      - name: Deploy the webapp stack to the prod account
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          npx cdk bootstrap
          STACKNAME=$(npx @cdk-turnkey/stackname@1.2.0 --suffix webapp)
          npx cdk deploy --require-approval never ${STACKNAME}

      - name: Deploy to the frontend bucket (prod account)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          bash scripts/deploy-frontend.sh

      - name: Deploy content (prod account)
        working-directory: content
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          bash deploy-content.sh

      - name: Run integration tests, prod account
        working-directory: scripts
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_REGION: "us-east-1"
        run: |
          bash itest.sh

      - name: Identify prod2 account and region
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD2_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD2_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          aws sts get-caller-identity
          echo ${AWS_DEFAULT_REGION} | sed 's/-/+/g'

      - name: Deploy the webapp stack to the prod2 account
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD2_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD2_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          npx cdk bootstrap
          STACKNAME=$(npx @cdk-turnkey/stackname@1.2.0 --suffix webapp)
          npx cdk deploy --require-approval never ${STACKNAME}

      - name: Deploy to the frontend bucket (prod2 account)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD2_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD2_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          bash scripts/deploy-frontend.sh

      - name: Deploy content (prod2 account)
        working-directory: content
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD2_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD2_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          bash deploy-content.sh

      - name: Run integration tests, prod2 account
        working-directory: scripts
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD2_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD2_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_REGION: "us-east-1"
        run: |
          bash itest.sh
